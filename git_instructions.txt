Istruzioni:

-- Per committare un file da locale al repo github:
 - git add .  (oppure: git add namefile1.extension namefile2.extension ....)
 - git commit -m "desccription"
 - git push

-- Per clonare un progetto in locale creato in github:
 - entrare in una cartella dove si vuole clonare il progetto
 - git clone https://github.com/user/repositoryName
 - entrare nella cartella appena creata con il clone
 - lavorare e fare eventuali commit


 -- Per vedere lo status dei file locali rispetto a quelli committati:
  - git status

 -- Vedere le differenze
  - git diff

-- Se un file presenta conflitti dopo aver fatto il pull, aprire il file, fare il merge dei conflitti
	committarlo.
	
-- SourceTree
Per creare un ramo D a partire da un altro ramo S, essere sicuri di essere posizionati sul ramo S.

============= MERGE ===================

-- Merge (Pull) via github:
	Durante i merge (pull) il ramo nella sezione base è quel ramo sul quale verranno riversati i file del
	ramo nella sezione compare! [ base <- compare ]
	
	esempio:
	- ramo [files] (nomi uguali file uguali)
	
	siuazione iniziale
	- r1 [ a b c ]
	- r2 [ a b d ]
	
	pull request - [base:r2      compare:r1] - r2 si tira i file di r1 
	merge pull request
	
	risultato dopo il pull
	- r1 [ a b c ]
	- r2 [ a b c d ]
	
	ramo r1 può quindi essere eliminato.
	
-- Merge via sourceTree:
	Dal ramo corrente (quello attuale di lavoro) (es: r2) premere Unisci.
	Selezionare poi il ramo che si vuole unire a quello corrente (es: r1).
	Nel ramo corrente vengono portate le modifiche del ramo selezionato
	(es: in r2 (corrente) vengono importate le modifiche di r1 selezionato).
	
	Merge brench r1 into r2. (Merge brench [selezionato] into [corrente])
	
	_________
	Conflitti:
	
	esempio:
	
	siuazione iniziale
	ramo corrente b2
	- b1 [ a ]
		a:
		test su b2
		1
		2
		3 di b1
		4
		b1
		5
		6 di b1 modifico in b1
		7 in b1
		8
	
	- b2 [ a ]
		a:
		test su b2
		1
		2
		3 di b2
		4
		b1
		5
		6 di b2 modifico in b2
		7 in b2
		8
	
	Da ramo b2 seleziono Unisci.
	Selezionare una commessa di b1.
	
	Su b2 ora trovo la situazione:
		a:
		test su b2
		1
		2
		<<<<<<< HEAD
		3 di b2
		4
		b1
		5
		6 di b2 modifico in b2
		7 in b2
		=======
		3 di b1
		4
		b1
		5
		6 di b1 modifico in b1
		7 in b1
		>>>>>>> b1
		8
		
	
		quindi:
		<<<<<<< HEAD ramo corrente (inizio conflitto)
		parte di codice del ramo corrente in conflitto
		=======
		parte di codice del ramo selezionato in conflitto
		>>>>>>> nome del ramo selezionato (fine conflitto)
	
	Risolvo i confilli (su file in file system o su sourceTree) e procedo.
	Il branch b1 è rimasto invariato mentre b2 si è preso le modifiche
	di b2 e quelle selezionate dalla risoluzione dei conflitti.
	
	Merge branch 'b1' into 'b2'.
	

-- Merge via gitlab:
	[source  ->  target]

	esempio:
	- branch [files] (nomi uguali file uguali)
	
	siuazione iniziale
	- b1 [ a b 1 ]
	- b2 [ a b 2 ]
	
	Merge request - [source:b1      target:b2] 
	Request to merge b1 into b2.
	
	The changes were merged into b2. You can remove the source branch now.
	risultato dopo il pull
	- b1 [ a b 1 ]
	- b2 [ a b 1 2 ]

	_________
	Conflitti:
	
	esempio:
	
	siuazione iniziale
	- b1 [ a ]
		a: 
		test su b1
		1
		2
		3
		4
		b1
		5
		6
			
	- b2 [ a b ]
		a:
		test su b2
		1
		2
		3
		4
		5
		
		b: vuoto
		
	Merge request - [source:b1      target:b2]
	Request to merge b1 into b2.
	This merge request contains merge conflicts.
	
	Resolve conflict.
	Showing 2 conflicts between b1 and b2:
	
	
	Interactive mode (source version è segnata come our)
		- source version	vs		- target version
		HEAD//our changes			origin//their changes
		test su b1				test su b2
		1					1
		2					2
		3					3
		4					4
		HEAD//our changes 			origin//their changes
		b1					5
		5		
		6
	
	Edit inline
		<<<<<<< a.txt
		test su b1
		=======
		test su b2
		>>>>>>> a.txt
		1
		2
		3
		4
		<<<<<<< a.txt
		b1
		5
		6
		=======
		5
		>>>>>>> a.txt
		
		quindi:
		<<<<<<< nome file in conflitto (inizio conflitto)
		parte di source version in conflitto
		=======
		parte di target version in conflitto
		>>>>>>> nome file in conflitto (fine conflitto)
		
	
	Risolvere i conflitti mantenendo la parte interessata.
	Commit changes.
	Accept Merge Request.
	
	Risultato:
	- b1 [ a ]
	- b2 [ a ]
	I file a sono identici.
	
	I due branch b1 e b2 sono perfettamente allineati e la versione definitiva
	è quella risultante dal portare la versione di b1 in b1 (il file b è stato
	eliminato) e dalla selezione delle parti da mantenere nei conflitti.
	I passaggi nel network graph sono infatti due:
	Merge branch 'b2' into 'b1'
	Merge branch 'b1' into 'b2'.
		

		

	(((((Da verificare:
		Se nella pagina Merge Requests si trova scritto: "Request to merge A into B",
		alla fine del merge e alla correzione di eventuali conflitti questo è
		cià che si ottiene: (pagina Network) "Merge branch 'B' into 'A'" ovvero che
		il ramo 'B' è stato riversato nel ramo 'A')))))



-- Useful vim command:
	- dd delete line
	- :wq Write file to disk and quit the editor
	- :q! Quit 
	- a Append text following current cursor position
	- A Append text to the end of current line
	- i Insert text before the current cursor position
	- I Insert text at the beginning of the cursor line
	- /text search text in the file (press n to next occurence)
